<?php

/**
 *  @file
 *  Provide main module for custom functionality.
 */

  module_load_include('inc', 'custom','custom.pages');
  module_load_include('inc', 'custom','custom.form');
  module_load_include('inc', 'custom','custom');
  module_load_include('inc', 'custom','custom.block');

/**
 * Implements hook_menu_alter().
 */
function custom_menu_alter(&$items) {
	$items['node']['page callback'] = 'custom_redirect_node_page';
  $items['search']['title'] = t('Search results');
}

/**
 * Implements hook_menu().
 */
function custom_menu() {
	$items = array();

  $items['page-not-found'] = array(
  	'title' 				=> t('Error 404'),
  	'page callback' => 'custom_404_error_callback',
  	'access callback' => TRUE,
  );
  
  return $items;
}
/**
 * Callback function for page 404.
 */
function custom_404_error_callback() {
	$content  = '<h2>'. t('Page not found') . '</h2>';
	$content .= '<p>'. t('Page you have requested was not found. Perhaps it has been moved or deleted.') . '</p>';
	return $content;
}

/**
 * Callback function for page node.
 */
function custom_redirect_node_page() {
	drupal_goto('<front>');
}

/**
 * Implements hook_block_info().
 */
function custom_block_info() {
  $blocks['custom_threads_menu'] = array(
    'info' => t('Threads menu'),
  );

  $blocks['ask_question'] = array(
    'info' => t('Ask a question'),
  );

  $blocks['custom_popup_render'] = array(
    'info' => t('Custom popup render'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function custom_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'custom_threads_menu':
      $block['subject'] = t('Threads');
      $block['content'] = _custom_get_link_threads();
      break;

    case 'ask_question':
      $link_text = t('Ask your question');
      $block['content'] = '<button type="button" class="btn btn-success btn-lg" data-toggle="modal" data-target="#block-custom-custom-popup-render">' . $link_text . '</button>';
      break;

    case 'custom_popup_render':
      $block['content'] = _custom_popup_render();
      break;

  }
  return $block;
}

/**
 * Function _get_link_threads().
 */
function _custom_get_link_threads() {
	global $language;
	$langcode = $language->language;

  $vid = taxonomy_vocabulary_machine_name_load('threads');
	$taxonomy = taxonomy_get_tree($vid->vid);

	$list = '';
	$allNumber = 0;
	$isActive = FALSE;
	foreach ($taxonomy as $key => $terms) {
		$countNumber = taxonomy_menu_term_count_nodes($terms->tid, $vid->vid);
		if ($countNumber > 0) {
			$class = '';
			$term = i18n_taxonomy_localize_terms($terms);
			$path = '/' . $langcode . '/'. drupal_lookup_path('alias', 'taxonomy/term/'.$terms->tid, $langcode);
			
			$name = $term->name;
			if ($path == '/' . $langcode . '/'. drupal_get_path_alias($_GET['q'])) {
				$class = 'active';
				$isActive = TRUE;
			}
			$list .= "<li><a href='$path' class='$class'>$name<span>$countNumber</span></li>";
			$allNumber += $countNumber;
		}
	}
	$class = '';
	if (!$isActive) {
		$class = 'active';
	}
	if (!empty($list)) {
		$content  = '<ul class="threads-list">';
		$content .= "<li><a href='/$langcode/taxonomy/term/all-temy' class='$class'>". t('All replies') ."<span>$allNumber</span></li>";
		$content .= $list;
		$content .= '</ul>';
	}

	return $content;
}

/**
 * Implements hook_block_view_alter().
 */
function custom_block_view_alter(&$data, $block) {
	if ($block->delta == 'language' && $block->module == 'locale') {
		global $language;
    $path = drupal_is_front_page() ? '/' : $_GET['q'];
		$links = language_negotiation_get_switch_links('language', $path);
		if ($language->language == 'ru') {
			$language->native = 'Рус';
		} else {
			$language->native = 'Aнгл';
		}
		$links->links['en']['title'] = 'Aнгл';
		$links->links['ru']['title'] = 'Рус';

    if (isset($links->links)) {
      $variables = array('links' => $links->links, 'attributes' => array('class' => array('dropdown-menu')));
			$data['content']  = '<ul id="custom-lanhuage-dropdown" class="nav pull-right"><li class="dropdown menu-item">';
			$data['content'] .= '<a href="#" class="dropdown-toggle" data-toggle="dropdown">' . $language->native .'</a>';
			$data['content'] .= theme('links__locale_block', $variables);
			$data['content'] .= '</li></ul>';
    }

	}
}

/**
 * Function for render content popup.
 */
function _custom_popup_render() {
  $content = '';
  $content .= '<div class="modal-dialog">';
  $content .= '<div class="modal-content">';
  $content .= '<div class="modal-header">';
  $content .= '<span class="title">';
  $content .= t('Ask your question');
  $content .= '</span>';
  $content .= '<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>';
  $content .= '</div>';
  $content .= '<div class="modal-body">';
  $block = module_invoke('webform', 'block_view', 'client-block-308');
  $content .= render($block['content']);
  $content .= '</div>';
  $content .= '</div>';
  $content .= '</div>';
  return $content;
}

/**
 * Implements template_preprocess_search_result().
 */
function custom_preprocess_search_result(&$variables) {
  global $language;

  $result = $variables['result'];
  $variables['url'] = check_url($result['link']);
  $variables['title'] = check_plain($result['title']);
  if (isset($result['language']) && $result['language'] != $language->language && $result['language'] != LANGUAGE_NONE) {
    $variables['title_attributes_array']['xml:lang'] = $result['language'];
    $variables['content_attributes_array']['xml:lang'] = $result['language'];
  }
  if (!empty($result['type'])) {
  	$variables['type_section'] = $result['type'];
  }

  $info = array();
  if (!empty($result['module'])) {
    $info['module'] = check_plain($result['module']);
  }
  if (isset($result['extra']) && is_array($result['extra'])) {
    $info = array_merge($info, $result['extra']);
  }

  $variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';

  $variables['info_split'] = $info;
  $variables['info'] = implode(' - ', $info);
  $variables['theme_hook_suggestions'][] = 'search_result__' . $variables['module'];
}

/**
 * Implements hook_query_alter().
 */
function custom_query_alter(&$query) {
  if ($query instanceof PagerDefault
    && ($tables = $query->getTables())
    && isset($tables['i']['table'])
    && $tables['i']['table'] === 'search_index') {
    $query->limit(5);
  }
}

/**
 * Implements hook_form_alter().
 */
function custom_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {
    case 'unisender_subscribe_subscribe_form':
      $form['name']['#title_display'] = 'invisible';
      $form['name']['#prefix'] = '';
      $form['email']['#title_display'] = 'invisible';
      $form['name']['#weight'] = 0;
      $form['email']['#weight'] = 1;
      $form['email']['#attributes']['placeholder'] = t('E-mail adress');
      $form['name']['#attributes']['placeholder'] = t('Name Surname');
      $form['#submit'][] = 'custom_unisender_subscribe_subscribe_form_submit';
      break;
  }
}

/**
 * Submit for unisender_subscribe_subscribe_form.
 */
function custom_unisender_subscribe_subscribe_form_submit($form, &$form_state) {
  drupal_set_message(t('You have successfully signed up for news'));
}
